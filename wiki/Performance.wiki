#summary performance page
#labels Featured

In this test, it measured the elapsed time of serializing and deserializing.

If the elapsed time will be performed 10,000 times.

= Functions =
||               || *default*       || *json*          || *msgpack*               ||
|| *serialize*   || _serialize()_   || _json_encode()_ || _msgpack_serialize()_   ||
|| *unserialize* || _unserialize()_ || _json_decode()_ || _msgpack_unserialize()_ ||

= Benchmark =
{{{
require_once 'Benchmark/Timer.php';

$loop = 10000;

$pack = null;
$unpack = null;

$t = new Benchmark_Timer;
$t->start();
for ($i = 0; $i < $loop; $i++)
{
    $pack = msgpack_serialize($value);
    //$pack = serialize($value);
    //$pack = json_encode($value);
}
$t->setMarker('serialize');

for ($i = 0; $i < $loop; $i++)
{
    $unpack = msgpack_unserialize($pack);
    //$unpack = unserialize($pack);
    //$unpack = json_decode($pack);
}

$t->stop();
$t->display();
}}}

= Performances =
== Integer ==
=== Value ===
{{{
$values = rand();
}}}

=== Speed (sec) ===
||               || *default*       || *json*          || *msgpack*       ||
|| *serialize*   || 0.0405 _(100%)_ || 0.0337 _(83%)_  || 0.0413 _(101%)_ ||
|| *unserialize* || 0.0381 _(100%)_ || 0.0526 _(137%)_ || 0.0374 _(98%)_  ||

=== Size (byte) ===
|| *default*   || *json*    || *msgpack* ||
|| 10 _(100%)_ || 7 _(70%)_ || 5 _(50%)_ ||


== Floating point number ==
=== Value ===
{{{
$value = log(rand());
}}}

=== Speed (sec) ===
||               || *default*       || *json*         || *msgpack*      ||
|| *serialize*   || 0.1238 _(100%)_ || 0.0483 _(39%)_ || 0.0425 _(34%)_ ||
|| *unserialize* || 0.0934 _(100%)_ || 0.0593 _(63%)_ || 0.0399 _(42%)_ ||

=== Size (byte) ===
|| *default*   || *json*     || *msgpack* ||
|| 54 _(100%)_ || 15 _(27%)_ || 9 _(16%)_ ||


== String ==
=== Value ===
{{{
$value = md5(rand());
}}}

=== Speed (sec) ===
||               || *default*       || *json*          || *msgpack*       ||
|| *serialize*   || 0.0408 _(100%)_ || 0.0507 _(124%)_ || 0.0415 _(101%)_ ||
|| *unserialize* || 0.0398 _(100%)_ || 0.0724 _(181%)_ || 0.0418 _(105%)_ ||

=== Size (byte) ===
|| *default*   || *json*     || *msgpack*  ||
|| 40 _(100%)_ || 34 _(85%)_ || 35 _(87%)_ ||


== Array ==
=== Value ===
{{{
$value = array(md5(rand()),
               md5(rand()),
               md5(rand()),
               md5(rand()),
               md5(rand()));
}}}

=== Speed (sec) ===
||               || *default*       || *json*          || *msgpack*      ||
|| *serialize*   || 0.0767 _(100%)_ || 0.1290 _(168%)_ || 0.0732 _(95%)_ ||
|| *unserialize* || 0.0944 _(100%)_ || 0.1820 _(192%)_ || 0.0913 _(96%)_ ||

=== Size (byte) ===
|| *default*    || *json*      || *msgpack*   ||
|| 226 _(100%)_ || 176 _(77%)_ || 181 _(80%)_ ||


== Array (Hash) ==
=== Value ===
{{{
$value = array(md5(rand()) => md5(rand()),
               md5(rand()) => md5(rand()),
               md5(rand()) => md5(rand()),
               md5(rand()) => md5(rand()),
               md5(rand()) => md5(rand()));
}}}

=== Speed (sec) ===
||               || *default*       || *json*          || *msgpack*      ||
|| *serialize*   || 0.0772 _(100%)_ || 0.2079 _(269%)_ || 0.0734 _(95%)_ ||
|| *unserialize* || 0.1104 _(100%)_ || 0.2710 _(245%)_ || 0.1025 _(92%)_ ||

=== Size (byte) ===
|| *default*    || *json*      || *msgpack*  ||
|| 406 _(100%)_ || 351 _(86%)_ || 351 _(86%)_||


== Object ==
=== Value ===
{{{
$value = new stdClass;
$value->param1 = rand();
$value->param2 = md5(uniqid());
$value->param3 = array(md5(uniqid()));
$value->param4 = array(md5(uniqid()) => md5(uniqid()));
$value->param5 = null;
}}}

=== Speed (sec) ===
||               || *default*       || *json* || *msgpack*      ||
|| *serialize*   || 0.0972 _(100%)_ || -      || 0.0886 _(91%)_ ||
|| *unserialize* || 0.1450 _(100%)_ || -      || 0.1369 _(94%)_ ||

=== Size (byte) ===
|| *default*    || *json* || *msgpack*   ||
|| 275 _(100%)_ || -      || 195 _(70%)_ ||
